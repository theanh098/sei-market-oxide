//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use super::sea_orm_active_enums::Marketplace;
use super::sea_orm_active_enums::SaleType;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "listing_nft")]
pub struct Model {
    pub tx_hash: String,
    pub created_date: DateTimeWithTimeZone,
    pub nft_id: i32,
    pub collection_address: String,
    pub sale_type: SaleType,
    pub seller_address: String,
    #[sea_orm(column_type = "Decimal(Some((90, 2)))")]
    pub price: Decimal,
    pub start_date: Option<DateTimeWithTimeZone>,
    pub end_date: Option<DateTimeWithTimeZone>,
    #[sea_orm(column_type = "Decimal(Some((90, 2)))", nullable)]
    pub min_bid_increment_percent: Option<Decimal>,
    pub denom: String,
    #[sea_orm(primary_key)]
    pub id: i32,
    pub expiration_time: Option<i32>,
    pub market: Marketplace,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::nft::Entity",
        from = "Column::NftId",
        to = "super::nft::Column::Id",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    Nft,
    #[sea_orm(has_many = "super::nft_bidding::Entity")]
    NftBidding,
}

impl Related<super::nft::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Nft.def()
    }
}

impl Related<super::nft_bidding::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::NftBidding.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
