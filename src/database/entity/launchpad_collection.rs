//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "launchpad_collection")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub collection_address: String,
    #[sea_orm(column_type = "Text")]
    pub admin: String,
    pub name: String,
    pub symbol: String,
    pub supply: i32,
    pub token_uri: String,
    pub royalty_percent: i32,
    pub royalty_wallet: String,
    pub next_token_id: i32,
    pub iterated_uri: bool,
    pub start_order: i32,
    pub frozen: bool,
    pub hidden_metadata: bool,
    pub placeholder_token_uri: Option<String>,
    pub withdraw_address: String,
    pub start_time: Option<DateTimeWithTimeZone>,
    pub end_time: Option<DateTimeWithTimeZone>,
    pub banner: Option<Vec<String>>,
    pub avatar: String,
    pub description: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::mint_group::Entity")]
    MintGroup,
}

impl Related<super::mint_group::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MintGroup.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
